// МодульОбъектаОбработки: ws64_Счетчик
// Описание: Объектно-ориентированный счетчик для отслеживания прогресса в циклах
// Автор: Валерий
// Дата создания: 2025-04-30
// Версия: v1.0
// Зависимости: НЕТ

#Область Переменные
Перем Значение;           // Текущее значение счетчика
Перем Минимум;           // Минимальное значение
Перем Максимум;          // Максимальное значение (может быть Неопределено)
Перем ИнтервалОбновления; // Интервал для выборочного вывода
Перем Превышен;           // Флаг превышения максимума
Перем Описание;           // Описание счетчика
#КонецОбласти

#Область Конструкторы
// Устанавливает значения по умолчанию для переменных счетчика.
Процедура ЗначенияПоУмолчанию()
	Описание = "Счетчик";
	Значение = 0;
	Минимум = 0;
	Максимум = Неопределено;
	ИнтервалОбновления = 1000;
	Превышен = Ложь;
КонецПроцедуры

// Инициализирует счетчик с заданными параметрами.
// Параметры:
//   МинимальноеЗначение - Число - Минимальное значение счетчика (по умолчанию 0).
//   МаксимальноеЗначение - Число, Неопределено - Максимальное значение счетчика (по умолчанию Неопределено).
//   ИнтервалОбновленияЗначения - Число - Интервал для выборочного вывода (по умолчанию 1000).
//   ОписаниеСчетчика - Произвольный - Описание счетчика, преобразуется в строку (по умолчанию "Счетчик").
Процедура Определить(МинимальноеЗначение = 0, МаксимальноеЗначение = Неопределено, ИнтервалОбновленияЗначения = 1000, ОписаниеСчетчика = "Счетчик") Экспорт
	Описание = Строка(ОписаниеСчетчика);
	Минимум = Цел(МинимальноеЗначение);
	Значение(Цел(МинимальноеЗначение));
	
	Если МаксимальноеЗначение <> Неопределено Тогда
		Максимум = Цел(МаксимальноеЗначение);
		Если Максимум < Минимум Тогда
			Максимум = Минимум;
		КонецЕсли;
		Если Значение > Максимум Тогда
			Превышен = Истина;
			Значение = Максимум;
		КонецЕсли;
	КонецЕсли;
	
	ИнтервалОбновления = Цел(Макс(ИнтервалОбновленияЗначения, 1)); // Гарантируем положительный интервал
КонецПроцедуры
#КонецОбласти

#Область Геттеры_Сеттеры
// Возвращает или устанавливает текущее значение счетчика.
// Параметры:
//   НовоеЗначение - Число, Неопределено - Если указано, устанавливает новое значение (должно быть числом).
// Возвращаемое значение: Число
Функция Значение(НовоеЗначение = Неопределено) Экспорт
	Если НовоеЗначение <> Неопределено Тогда
		Если ТипЗнч(НовоеЗначение) = Тип("Число") Тогда
			Значение = Цел(НовоеЗначение);
			Если Максимум <> Неопределено И Значение > Максимум Тогда
				Превышен = Истина;
				Значение = Максимум;
			Иначе
				Превышен = Ложь;
			КонецЕсли;
		Иначе
			ВызватьИсключение "Значение должно быть числом";
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции

// Возвращает минимальное значение счетчика.
// Возвращаемое значение: Число
Функция Минимум() Экспорт
	Возврат Минимум;
КонецФункции

// Возвращает максимальное значение счетчика.
// Возвращаемое значение: Число, Неопределено
Функция Максимум() Экспорт
	Возврат Максимум;
КонецФункции

// Возвращает описание счетчика.
// Возвращаемое значение: Строка
Функция Описание() Экспорт
	Возврат Описание;
КонецФункции
#КонецОбласти

#Область Экспортные_Процедуры
// Увеличивает значение счетчика на указанную величину.
// Если Счет < 1, значение увеличивается на 1.
// Параметры:
//   Счет - Число - Величина, на которую увеличивается счетчик (по умолчанию 1).
Процедура Добавить(Счет = 1) Экспорт
	Значение(Значение + Цел(?(Счет < 1, 1, Счет)));
КонецПроцедуры

// Сбрасывает значение счетчика до минимального.
Процедура Сброс() Экспорт
	Значение(Минимум);
	Превышен = Ложь;
КонецПроцедуры
#КонецОбласти

#Область Экспортные_Функции
// Проверяет, требуется ли обновление (вывод) значения на основе интервала или процента.
// Параметры:
//   Процент - Число - Процентный интервал обновления (по умолчанию 0, используется ИнтервалОбновления).
Функция Обновление(Процент = 0) Экспорт
	Если Процент > 0 И Максимум <> Неопределено И Максимум <> Минимум Тогда
		Процент = Мин(Макс(Процент, 0.1), 100); // Ограничиваем процент до 0.1–100
		Шаг = (Максимум - Минимум) * Процент / 100;
	Иначе
		Шаг = ИнтервалОбновления;
	КонецЕсли;
	Если Шаг <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Значение % Цел(Шаг) = 0;
КонецФункции

// Проверяет, находится ли значение счетчика в допустимом диапазоне (<= Максимум).
// Вызывает исключение, если Максимум не задан.
Функция ВДиапазоне() Экспорт
	Если Максимум = Неопределено Тогда
		ВызватьИсключение "Максимальное значение счетчика не задано. Укажите Максимум в методе Определить.";
	КонецЕсли;
	Возврат НЕ Превышен;
КонецФункции

// Возвращает процент выполнения счетчика (0-100).
Функция ПроцентВыполнения() Экспорт
	Если Максимум = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Если Максимум = Минимум Тогда
		Возврат 100;
	КонецЕсли;
	Возврат Цел((Значение - Минимум) / (Максимум - Минимум) * 100);
КонецФункции

// Возвращает строку с прогрессом счетчика.
Функция ПрогрессСтрокой() Экспорт
	Возврат СокрЛП(Строкой() + ", Выполнено: " + ПроцентВыполнения() + "%");
КонецФункции

// Возвращает строковое представление счетчика в формате "Значение:Максимум:Остаток Описание".
// Параметры:
//   ПоказыватьИтог - Булево - Если Истина, в строку включается максимум.
//   ПоказыватьСчет - Булево - Если Истина, в строку включается текущее значение.
//   ПоказыватьОстаток - Булево - Если Истина, в строку включается остаток до максимума.
Функция Строкой(ПоказыватьИтог = Истина, ПоказыватьСчет = Истина, ПоказыватьОстаток = Истина) Экспорт
	М = Новый Массив;
	Если ПоказыватьИтог Тогда
		М.Добавить(?(Максимум = Неопределено, "∞", Формат(Максимум, "ЧН=; ЧГ=")));
	КонецЕсли;
	Если ПоказыватьСчет Тогда
		М.Добавить(Формат(Значение, "ЧН=; ЧГ="));
	КонецЕсли;
	Если ПоказыватьОстаток Тогда
		М.Добавить(?(Максимум = Неопределено, "∞", Формат(Максимум - Значение, "ЧН=; ЧГ=")));
	КонецЕсли;
	Возврат СокрЛП(СтрСоединить(М, ":") + " " + Описание);
КонецФункции
#КонецОбласти

#Область Пример_Использования
// Пример использования счетчика для демонстрации его работы
Процедура ПримерИспользования() Экспорт
	// Инициализация счетчика
	Определить(0, 100, 10, "Тестовый счетчик");
	Сообщить("Начало: " + ПрогрессСтрокой());
	
	// Имитация работы цикла
	Для Сч = 1 По 100 Цикл
		Добавить();
		Если Обновление(10) Тогда // Обновление каждые 10%
			Сообщить(ПрогрессСтрокой());
		КонецЕсли;
	КонецЦикла;
	
	// Проверка диапазона
	Если ВДиапазоне() Тогда
		Сообщить("Счетчик в допустимом диапазоне");
	Иначе
		Сообщить("Счетчик превысил максимум");
	КонецЕсли;
	
	// Сброс счетчика
	Сброс();
	Сообщить("После сброса: " + ПрогрессСтрокой());
КонецПроцедуры
#КонецОбласти

#Область Тесты
// Тесты для проверки корректности работы счетчика
Процедура Тест() Экспорт
	Ошибки = Новый Массив;
	
	// Тест 1: Проверка инициализации счетчика
	Определить(0, 100, 25, "Тестовый счетчик");
	Если Значение() <> 0 Или Минимум() <> 0 Или Максимум() <> 100 Или ИнтервалОбновления <> 25 Или Описание() <> "Тестовый счетчик" Тогда
		Ошибки.Добавить("Тест 1: Ошибка инициализации счетчика");
	КонецЕсли;
	
	// Тест 2: Проверка строкового представления после инициализации
	Если Строкой() <> "0:100:100 Тестовый счетчик" Тогда
		Ошибки.Добавить("Тест 2: Ошибка строкового представления");
	КонецЕсли;
	
	// Тест 3: Проверка метода Добавить
	Добавить(10);
	Если Значение() <> 10 Или НЕ ВДиапазоне() Тогда
		Ошибки.Добавить("Тест 3: Ошибка метода Добавить");
	КонецЕсли;
	
	// Тест 4: Проверка Обновление на значении 25 (должно быть Истина)
	Значение(25);
	Если НЕ Обновление() Тогда
		Ошибки.Добавить("Тест 4: Ошибка Обновление на значении 25");
	КонецЕсли;
	
	// Тест 5: Проверка Обновление на значении 26 (должно быть Ложь)
	Значение(26);
	Если Обновление() Тогда
		Ошибки.Добавить("Тест 5: Ошибка Обновление на значении 26");
	КонецЕсли;
	
	// Тест 6: Проверка Обновление с процентом 50 на значении 50 (должно быть Истина)
	Значение(50);
	Если НЕ Обновление(50) Тогда
		Ошибки.Добавить("Тест 6: Ошибка Обновление с процентом 50 на значении 50");
	КонецЕсли;
	
	// Тест 7: Проверка Обновление с процентом 50 на значении 51 (должно быть Ложь)
	Значение(51);
	Если Обновление(50) Тогда
		Ошибки.Добавить("Тест 7: Ошибка Обновление с процентом 50 на значении 51");
	КонецЕсли;
	
	// Тест 8: Проверка превышения максимума
	Добавить(100);
	Если Значение() <> 100 Или НЕ Превышен Тогда
		Ошибки.Добавить("Тест 8: Ошибка обработки превышения максимума");
	КонецЕсли;
	
	// Тест 9: Проверка сброса
	Сброс();
	Если Значение() <> 0 Или Превышен Тогда
		Ошибки.Добавить("Тест 9: Ошибка сброса счетчика");
	КонецЕсли;
	
	// Тест 10: Проверка процента выполнения
	Определить(0, 100, 25, "Тестовый счетчик");
	Значение(50);
	Если ПроцентВыполнения() <> 50 Тогда
		Ошибки.Добавить("Тест 10: Ошибка расчета процента выполнения");
	КонецЕсли;
	
	// Тест 11: Проверка работы с неопределенным максимумом
	Определить(0, Неопределено, 25, "Счетчик без максимума");
	Добавить(100);
	Если ПроцентВыполнения() <> 0 Или ПрогрессСтрокой() <> "100:∞:∞ Счетчик без максимума, Выполнено: 0%" Тогда
		Ошибки.Добавить("Тест 11: Ошибка работы с неопределенным максимумом");
	КонецЕсли;
	
	// Тест 12: Проверка исключения в ВДиапазоне при неопределенном максимуме
	Попытка
		ВДиапазоне();
		Ошибки.Добавить("Тест 12: Ошибка, не вызвано исключение в ВДиапазоне");
	Исключение
		// Ожидаемое поведение
	КонецПопытки;
	
	// Тест 13: Проверка установки некорректного типа для Значение
	Попытка
		Значение("Строка");
		Ошибки.Добавить("Тест 13: Ошибка, не вызвано исключение при установке некорректного типа для Значение");
	Исключение
		// Ожидаемое поведение
	КонецПопытки;
	
	// Тест 14: Проверка преобразования описания из разных типов
	Определить(0, 100, 25, 123);
	Если Описание() <> "123" Тогда
		Ошибки.Добавить("Тест 14: Ошибка преобразования числа в описание");
	КонецЕсли;
	Определить(0, 100, 25, Неопределено);
	Если Описание() <> "" Тогда
		Ошибки.Добавить("Тест 14: Ошибка преобразования Неопределено в описание");
	КонецЕсли;
	Определить(0, 100, 25, ТекущаяДата());
	Если Описание() <> Строка(ТекущаяДата()) Тогда
		Ошибки.Добавить("Тест 14: Ошибка преобразования даты в описание");
	КонецЕсли;
	
	// Итоги тестирования
	Если Ошибки.Количество() = 0 Тогда
		Сообщить("ws64_Счетчик: Все тесты пройдены успешно");
	Иначе
		Сообщить("ws64_Счетчик: Обнаружены ошибки" + Символы.ПС + СтрСоединить(Ошибки, Символы.ПС));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

// Инициализация значений по умолчанию при создании объекта
ЗначенияПоУмолчанию();