// МодульОбъектаОбработки: ws64_Счетчик
// Описание: Объектно-ориентированный счетчик для отслеживания прогресса в циклах
// Автор: Valery
// Дата создания: 2025-04-30
// Версия: v1.2
// Зависимости: НЕТ

#Область ОписаниеПеременных

Перем Значение; // Текущее значение счетчика
Перем Минимум; // Минимальное значение
Перем Максимум; // Максимальное значение (может быть Неопределено)
Перем ИнтервалОбновления; // Интервал для выборочного вывода
Перем Превышен; // Флаг превышения максимума
Перем Описание; // Описание счетчика
Перем Инициализирован; // Флаг завершения инициализации

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает или возвращает текущее значение счетчика.
// Параметры:
//   НовоеЗначение - Число, Неопределено - Если указано, устанавливает новое значение (должно быть числом).
// Возвращаемое значение:
//   Число, ЭтотОбъект - Текущее значение счетчика или сам объект для цепочки.
Функция Значение(НовоеЗначение = Неопределено) Экспорт
    Если НовоеЗначение = Неопределено Тогда
        Возврат Значение;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Значение должно быть числом";
    КонецЕсли;
    Значение = Цел(НовоеЗначение);
    Инициализирован = Ложь; // Сбрасываем флаг при изменении
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает минимальное значение счетчика.
// Параметры:
//   НовоеЗначение - Число, Неопределено - Если указано, устанавливает новое минимальное значение.
// Возвращаемое значение:
//   ЭтотОбъект - для цепочки вызовов, если задано значение; Число - если только получение.
Функция Минимум(НовоеЗначение = Неопределено) Экспорт
    Если НовоеЗначение = Неопределено Тогда
        Возврат Минимум;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Минимальное значение должно быть числом.";
    КонецЕсли;
    Минимум = Цел(НовоеЗначение);
    Инициализирован = Ложь; // Сбрасываем флаг при изменении
    Возврат ЭтотОбъект;
КонецФункции

// Возвращает или устанавливает максимальное значение счетчика.
// Параметры:
//   НовоеЗначение - Число, Неопределено - Если указано, устанавливает новое максимальное значение.
// Возвращаемое значение:
//   ЭтотОбъект - для цепочки вызовов, если задано значение; Число, Неопределено - если только получение.
Функция Максимум(НовоеЗначение = Неопределено) Экспорт
    Если НовоеЗначение = Неопределено Тогда
        Возврат Максимум;
    КонецЕсли;
    Если НовоеЗначение <> Неопределено И ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Максимальное значение должно быть числом.";
    КонецЕсли;
    Максимум = ?(НовоеЗначение = Неопределено, Неопределено, Цел(НовоеЗначение));
    Инициализирован = Ложь; // Сбрасываем флаг при изменении
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает описание счетчика.
// Параметры:
//   НовоеЗначение - Произвольный, Неопределено - Если указано, устанавливает новое описание (преобразуется в строку).
// Возвращаемое значение:
//   ЭтотОбъект - для цепочки вызовов, если задано значение; Строка - если только получение.
Функция Описание(НовоеЗначение = Неопределено) Экспорт
    Если НовоеЗначение = Неопределено Тогда
        Возврат Описание;
    КонецЕсли;
    Описание = СокрЛП(Строка(НовоеЗначение));
    Инициализирован = Ложь; // Сбрасываем флаг при изменении
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает интервал обновления.
// Параметры:
//   НовоеЗначение - Число, Неопределено - Если указано, устанавливает новый интервал (должно быть положительным).
// Возвращаемое значение:
//   ЭтотОбъект - для цепочки вызовов, если задано значение; Число - если только получение.
Функция ИнтервалОбновления(НовоеЗначение = Неопределено) Экспорт
    Если НовоеЗначение = Неопределено Тогда
        Возврат ИнтервалОбновления;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Интервал обновления должен быть числом.";
    КонецЕсли;
    ИнтервалОбновления = Цел(Макс(НовоеЗначение, 1)); // Гарантируем положительный интервал
    Инициализирован = Ложь; // Сбрасываем флаг при изменении
    Возврат ЭтотОбъект;
КонецФункции

// Инициализирует счетчик, проверяя и корректируя зависимые параметры.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Инициализация() Экспорт
    Если Инициализирован Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    
    Если Максимум = Неопределено Тогда
        Превышен = Ложь;
    Иначе
        Если Минимум > Максимум Тогда
            Минимум = Максимум;
        КонецЕсли;
        
        Если Значение >= Минимум И Значение <= Максимум Тогда
            Превышен = Ложь;
        ИначеЕсли Значение > Максимум Тогда
            Значение = Максимум;
            Превышен = Истина;
        Иначе // Значение < Минимум
            Значение = Минимум;
            Превышен = Ложь;
        КонецЕсли;
    КонецЕсли;
    
    Инициализирован = Истина;
    Возврат ЭтотОбъект;
КонецФункции

// Увеличивает значение счетчика на указанную величину.
// Если Счет < 1, значение увеличивается на 1.
// Параметры:
//   Счет - Число - Величина, на которую увеличивается счетчик (по умолчанию 1).
Процедура Добавить(Счет = 1) Экспорт
    Инициализация();
    Если ТипЗнч(Счет) <> Тип("Число") Тогда
        ВызватьИсключение "Параметр Счет должен быть числом.";
    КонецЕсли;
    Значение(Значение + Цел(?(Счет < 1, 1, Счет)));
КонецПроцедуры

// Сбрасывает значение счетчика до минимального.
Процедура Сброс() Экспорт
    Инициализация();
    Значение(Минимум);
    Превышен = Ложь;
КонецПроцедуры

// Проверяет, требуется ли обновление (вывод) значения на основе интервала или процента.
// Параметры:
//   Процент - Число - Процентный интервал обновления (по умолчанию 0, используется ИнтервалОбновления).
// Возвращаемое значение:
//   Булево
Функция Обновление(Процент = 0) Экспорт
    Инициализация();
    МинимальныйПроцент = 0.1;
    МаксимальныйПроцент = 100;
    Если Максимум = Неопределено Тогда
        Шаг = ИнтервалОбновления;
    Иначе
        Если Процент > 0 И Минимум < Максимум Тогда
            Процент = Мин(Макс(Процент, МинимальныйПроцент), МаксимальныйПроцент); // Ограничиваем процент до 0.1-100
            Шаг = (Максимум - Минимум) * Процент / МаксимальныйПроцент;
        Иначе
            Шаг = ИнтервалОбновления;
        КонецЕсли;
    КонецЕсли;
    
    Если Шаг <= 0 Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Возврат (Значение % Цел(Шаг)) = 0;
КонецФункции

// Проверяет, находится ли значение счетчика в допустимом диапазоне (<= Максимум).
// Вызывает исключение, если Максимум не задан.
// Возвращаемое значение:
//   Булево
Функция ВДиапазоне() Экспорт
    Инициализация();
    Если Максимум = Неопределено Тогда
        ВызватьИсключение "Максимальное значение счетчика не задано.";
    КонецЕсли;
    Возврат Не Превышен;
КонецФункции

// Возвращает процент выполнения счетчика (0-100).
// Возвращаемое значение:
//   Число
Функция ПроцентВыполнения() Экспорт
    Инициализация();
    МаксимальныйПроцент = 100;
    Если Максимум = Неопределено Или Максимум = Минимум Тогда
        Возврат 0;
    КонецЕсли;
    Возврат Мин(Цел((Значение - Минимум) / (Максимум - Минимум) * МаксимальныйПроцент), МаксимальныйПроцент);
КонецФункции

// Возвращает строку с прогрессом счетчика.
// Возвращаемое значение:
//   Строка
Функция ПрогрессСтрокой() Экспорт
    Инициализация();
    Возврат СокрЛП(Строкой() + ", Выполнено: " + ПроцентВыполнения() + "%");
КонецФункции

// Возвращает строковое представление счетчика.
// Параметры:
//   ПоказыватьИтог - Булево - Если Истина, в строку включается максимум.
//   ПоказыватьСчет - Булево - Если Истина, в строку включается текущее значение.
//   ПоказыватьОстаток - Булево - Если Истина, в строку включается остаток до максимума.
// Возвращаемое значение:
//   Строка - Формат: "Значение:Максимум:Остаток Описание".
Функция Строкой(ПоказыватьИтог = Истина, ПоказыватьСчет = Истина, ПоказыватьОстаток = Истина) Экспорт
    Инициализация();
    М = Новый Массив;
    ФорматЧисла = "ЧН=; ЧГ=";
    Если ПоказыватьИтог Тогда
        М.Add(?(Максимум = Неопределено, "∞", Формат(Максимум, ФорматЧисла)));
    КонецЕсли;
    Если ПоказыватьСчет Тогда
        М.Add(Формат(Значение, ФорматЧисла));
    КонецЕсли;
    Если ПоказыватьОстаток Тогда
        М.Add(?(Максимум = Неопределено, "∞", Формат(Максимум - Значение, ФорматЧисла)));
    КонецЕсли;
    Возврат СокрЛП(СтрСоединить(М, ":") + " " + Описание);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значения по умолчанию для переменных счетчика.
Процедура ЗначенияПоУмолчанию()
    Описание = "Счетчик";
    Значение = 0;
    Минимум = 0;
    Максимум = Неопределено;
    ИнтервалОбновления = 1000;
    Превышен = Ложь;
    Инициализирован = Ложь;
КонецПроцедуры

#КонецОбласти

#Область Пример
// Пример использования счетчика для демонстрации его работы
Процедура ПримерИспользования() Экспорт
    // Инициализация счетчика с цепочечным вызовом
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(10)
        .Описание("Тестовый счетчик")
        .Инициализация();
    
    Сообщить("Начало: " + Счетчик.ПрогрессСтрокой());
    
    // Имитация работы цикла
    Для Сч = 1 По 120 Цикл
        Счетчик.Добавить();
        Если Счетчик.Обновление(10) Тогда // Обновление каждые 10%
            Сообщить(Счетчик.ПрогрессСтрокой());
        КонецЕсли;
    КонецЦикла;
    
    // Проверка диапазона
    Если Счетчик.ВДиапазоне() Тогда
        Сообщить("Счетчик в допустимом диапазоне");
    Иначе
        Сообщить("Счетчик превысил максимум");
    КонецЕсли;
    
    // Сброс счетчика
    Счетчик.Сброс();
    Сообщить("После сброса: " + Счетчик.ПрогрессСтрокой());
КонецПроцедуры
#КонецОбласти

#Область Тесты
// Тесты для проверки корректности работы счетчика
Процедура Тест() Экспорт
    Ошибки = Новый Массив;
    
    Тест1(Ошибки);
    Тест2(Ошибки);
    Тест3(Ошибки);
    Тест4(Ошибки);
    Тест5(Ошибки);
    Тест6(Ошибки);
    Тест7(Ошибки);
    Тест8(Ошибки);
    Тест9(Ошибки);
    Тест10(Ошибки);
    Тест11(Ошибки);
    Тест12(Ошибки);
    Тест13(Ошибки);
    Тест14(Ошибки);
    
    // Итоги тестирования
    Если Ошибки.Количество() = 0 Тогда
        Сообщить("ws64_Счетчик: Все тесты пройдены успешно");
    Иначе
        Сообщить("ws64_Счетчик: Обнаружены ошибки" + Символы.ПС + СтрСоединить(Ошибки, Символы.ПС));
    КонецЕсли;
КонецПроцедуры

// Тест 1: Проверка инициализации счетчика
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест1(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Если Счетчик.Значение() <> 0
        Или Счетчик.Минимум() <> 0
        Или Счетчик.Максимум() <> 100
        Или Счетчик.ИнтервалОбновления() <> 25
        Или Счетчик.Описание() <> "Тестовый счетчик" 
        Тогда
        Ошибки.Добавить("Тест 1: Ошибка инициализации счетчика");
    КонецЕсли;
КонецПроцедуры

// Тест 2: Проверка строкового представления после инициализации
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест2(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Если Счетчик.Строкой() <> "0:100:100 Тестовый счетчик" Тогда
        Ошибки.Добавить("Тест 2: Ошибка строкового представления");
    КонецЕсли;
КонецПроцедуры

// Тест 3: Проверка метода Добавить
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест3(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Добавить(10);
    Если Счетчик.Значение() <> 10 Или Не Счетчик.ВДиапазоне() Тогда
        Ошибки.Добавить("Тест 3: Ошибка метода Добавить");
    КонецЕсли;
КонецПроцедуры

// Тест 4: Проверка Обновление на значении 25 (должно быть Истина)
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест4(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Значение(25);
    Если Не Счетчик.Обновление() Тогда
        Ошибки.Добавить("Тест 4: Ошибка Обновление на значении 25");
    КонецЕсли;
КонецПроцедуры

// Тест 5: Проверка Обновление на значении 26 (должно быть Ложь)
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест5(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Значение(26);
    Если Счетчик.Обновление() Тогда
        Ошибки.Добавить("Тест 5: Ошибка Обновление на значении 26");
    КонецЕсли;
КонецПроцедуры

// Тест 6: Проверка Обновление с процентом 50 на значении 50 (должно быть Истина)
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест6(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Значение(50);
    Если Не Счетчик.Обновление(50) Тогда
        Ошибки.Добавить("Тест 6: Ошибка Обновление с процентом 50 на значении 50");
    КонецЕсли;
КонецПроцедуры

// Тест 7: Проверка Обновление с процентом 50 на значении 51 (должно быть Ложь)
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест7(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Значение(51);
    Если Счетчик.Обновление(50) Тогда
        Ошибки.Добавить("Тест 7: Ошибка Обновление с процентом 50 на значении 51");
    КонецЕсли;
КонецПроцедуры

// Тест 8: Проверка превышения максимума
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест8(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Добавить(100);
    Если Счетчик.Значение() <> 100 Или Не Счетчик.Превышен Тогда
        Ошибки.Добавить("Тест 8: Ошибка обработки превышения максимума");
    КонецЕсли;
КонецПроцедуры

// Тест 9: Проверка сброса
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест9(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Инициализация();
    Счетчик.Сброс();
    Если Счетчик.Значение() <> 0 Или Счетчик.Превышен Тогда
        Ошибки.Добавить("Тест 9: Ошибка сброса счетчика");
    КонецЕсли;
КонецПроцедуры

// Тест 10: Проверка процента выполнения
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест10(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание("Тестовый счетчик")
        .Значение(50)
        .Инициализация();
    Если Счетчик.ПроцентВыполнения() <> 50 Тогда
        Ошибки.Добавить("Тест 10: Ошибка расчета процента выполнения");
    КонецЕсли;
КонецПроцедуры

// Тест 11: Проверка работы с неопределенным максимумом
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест11(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(Неопределено)
        .ИнтервалОбновления(25)
        .Описание("Счетчик без максимума")
        .Инициализация();
    Счетчик.Добавить(100);
    Если Счетчик.ПроцентВыполнения() <> 0 
        Или Счетчик.ПрогрессСтрокой() <> "100:∞:∞ Счетчик без максимума, Выполнено: 0%" 
        Тогда
        Ошибки.Добавить("Тест 11: Ошибка работы с неопределенным максимумом");
    КонецЕсли;
КонецПроцедуры

// Тест 12: Проверка исключения в ВДиапазоне при неопределенном максимуме
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест12(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(Неопределено)
        .ИнтервалОбновления(25)
        .Описание("Счетчик без максимума")
        .Инициализация();
    Попытка
        Счетчик.ВДиапазоне();
    Исключение
        Ошибки.Добавить("Тест 12: Ошибка, не вызвано исключение в ВДиапазоне");
    КонецПопытки;
КонецПроцедуры

// Тест 13: Проверка установки некорректного типа для Значение
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест13(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать();
    Попытка
        Счетчик.Значение("Строка");
    Исключение
        Ошибки.Добавить("Тест 13: Ошибка, не вызвано исключение при установке некорректного типа для Значение");
    КонецПопытки;
КонецПроцедуры

// Тест 14: Проверка преобразования описания из разных типов
// Параметры:
// Ошибки - Массив  - маасив содержит описание ошибок 
Процедура Тест14(Ошибки)
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание(123)
        .Инициализация();
    Если Счетчик.Описание() <> "123" Тогда
        Ошибки.Добавить("Тест 14: Ошибка преобразования числа в описание");
    КонецЕсли;
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание(Неопределено)
        .Инициализация();
    Если Счетчик.Описание() <> "" Тогда
        Ошибки.Добавить("Тест 14: Ошибка преобразования Неопределено в описание");
    КонецЕсли;
    Счетчик = Обработки.ws64_Счетчик.Создать()
        .Минимум(0)
        .Максимум(100)
        .ИнтервалОбновления(25)
        .Описание(ТекущаяДатаСеанса())
        .Инициализация();
    Если Счетчик.Описание() <> Строка(ТекущаяДатаСеанса()) Тогда
        Ошибки.Добавить("Тест 14: Ошибка преобразования даты в описание");
    КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Инициализация

ЗначенияПоУмолчанию();

#КонецОбласти