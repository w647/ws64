// +++--++
// МодульОбъектаОбработки: ws64_Монитор
// Описание: Монитор для отслеживания прогресса задач с использованием счетчиков и статусов
// Автор: Валерий
// Дата создания: 2025-04-29
// Версия: v1.0
// Зависимости: ws64_Счетчик

#Область Переменные_Экспорт
Перем Счетчик Экспорт; // Структура, ключ - строка, значение - ОбработкаОбъект.ws64_Счетчик
Перем Статус Экспорт; // Структура, ключ - строка, значение - строка, дата, число или др.
Перем Порядок Экспорт; // Массив строк вида <Тип>.<Ключ>, порядок вывода
Перем ОбычноеПриложение; // Булево, признак обычного приложения
Перем ФоновыйРежим Экспорт; // Булево, признак Фонового режима
#КонецОбласти

#Область Конструкторы
Процедура ЗначенияПоУмолчанию()
	Счетчик = Новый Структура;
	Статус = Новый Структура;
	Порядок = Новый Массив;
	ОбычноеПриложение = ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
	ФоновыйРежим = Ложь;
КонецПроцедуры
#КонецОбласти

#Область Управление_Данными
// Возвращает или устанавливает статус по ключу.
// Параметры:
//   Ключ - Строка - Идентификатор статуса (например, "Выполнение").
//   Значение - Строка, Дата, Число, Неопределено - Значение статуса (если Неопределено, только получение).
// Возвращаемое значение:
// Ссылка - на элемент Структуры Статус
Функция Статус(Ключ, Значение = Неопределено) Экспорт
	Если ПустаяСтрока(Ключ) Тогда
		ВызватьИсключение "Ключ статуса не может быть пустым.";
	КонецЕсли;
	Если Значение = Неопределено Тогда
		Если Статус.Свойство(Ключ) Тогда
			Возврат Статус[Ключ];
		КонецЕсли;
	КонецЕсли;
	Статус.Вставить(Ключ, Значение);
	Порядок(Ключ, "Статус");
	Возврат Статус[Ключ];
КонецФункции

// Создает или возвращает счетчик по ключу.
// Параметры:
//   Ключ - Строка - Идентификатор счетчика (например, "Товары").
//   МинимальноеЗначение - Число, Неопределено - Минимальное значение счетчика. Если Неопределено, счетчик не создается.
//   МаксимальноеЗначение - Число, Неопределено - Максимальное значение счетчика (по умолчанию Неопределено).
//   ИнтервалОбновления - Число - Интервал обновления (по умолчанию 1000).
//   Описание - Строка - Описание счетчика (по умолчанию "").
// Возвращаемое значение:
//   ОбработкаОбъект.ws64_Счетчик, Неопределено - Созданный или существующий счетчик.
Функция Счетчик(Ключ,
		МинимальноеЗначение = Неопределено,
		МаксимальноеЗначение = Неопределено,
		ИнтервалОбновления = 1000,
		Описание = ""
	) Экспорт
	Если МинимальноеЗначение = Неопределено Тогда
		Если Счетчик.Свойство(Ключ) Тогда
			Возврат Счетчик[Ключ];
		КонецЕсли;
	КонецЕсли;
	Значение = Обработки.ws64_Счетчик.Создать();
	Если МинимальноеЗначение <> Неопределено Тогда
		Значение.Определить(МинимальноеЗначение, МаксимальноеЗначение, ИнтервалОбновления, Описание);
	КонецЕсли;
	Счетчик.Вставить(Ключ, Значение);
	Порядок(Ключ, "Счетчик");
	Возврат Счетчик[Ключ];
КонецФункции

// Удаляет счетчик, статус или очищает монитор.
// Параметры:
//   Ключ - Строка, Неопределено - Идентификатор счетчика или статуса (если не задан или пустой, очищает всё).
//   Тип - Строка - Тип элемента ("Счетчик" или "Статус", по умолчанию "").
// Примечание: Игнорирует несуществующие ключи.
Процедура Очистить(Ключ = Неопределено, Тип = "") Экспорт
	Если Ключ = Неопределено ИЛИ ПустаяСтрока(Ключ) Тогда
		ЗначенияПоУмолчанию();
		Возврат;
	КонецЕсли;
	Если Тип = "Счетчик" ИЛИ ПустаяСтрока(Тип) Тогда
		Если Счетчик.Свойство(Ключ) Тогда
			Счетчик.Удалить(Ключ);
		КонецЕсли;
	КонецЕсли;
	Если Тип = "Статус" ИЛИ ПустаяСтрока(Тип) Тогда
		Если Статус.Свойство(Ключ) Тогда
			Статус.Удалить(Ключ);
		КонецЕсли;
	КонецЕсли;
	Индекс = Порядок.Найти("Счетчик." + Ключ);
	Если Индекс <> Неопределено Тогда
		Порядок.Удалить(Индекс);
	КонецЕсли;
	
КонецПроцедуры

// Перемещает ключ в конец массива Порядок для актуализации порядка вывода.
// Параметры:
//   Ключ - Строка - Идентификатор счетчика или статуса.
//   Тип - Строка - Тип элемента ("Счетчик" или "Статус").
Процедура Порядок(Ключ, Тип) Экспорт
	Элемент = Тип + "." + Ключ;
	Индекс = Порядок.Найти(Элемент);
	Если Индекс <> Неопределено Тогда
		Порядок.Удалить(Индекс);
	КонецЕсли;
	Структура = ?(Тип = "Счетчик", Счетчик, Статус);
	Если Структура.Свойство(Ключ) Тогда
		Порядок.Добавить(Элемент);
	КонецЕсли;
КонецПроцедуры

// Синхронизирует Порядок с ключами из Счетчик и Статус.
Процедура СинхронизироватьПорядок() Экспорт
	Для Каждого Элемент Из Счетчик Цикл
		ЭлементПорядка = "Счетчик." + Элемент.Ключ;
		Если Порядок.Найти(ЭлементПорядка) = Неопределено Тогда
			Порядок.Добавить(ЭлементПорядка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из Статус Цикл
		ЭлементПорядка = "Статус." + Элемент.Ключ;
		Если Порядок.Найти(ЭлементПорядка) = Неопределено Тогда
			Порядок.Добавить(ЭлементПорядка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область Вывод_и_Сохранение
// Возвращает строковое представление монитора.
// Параметры:
//   Разделитель - Строка, Неопределено - Разделитель строк (по умолчанию Символы.ПС).
// Возвращаемое значение:
//   Строка - Формат: "<Ключ1>: <Значение1><Разделитель><Ключ2>: <Значение2>..."
Функция Строкой(Разделитель = Неопределено) Экспорт
	Строки = Новый Массив;
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	Для Каждого Элемент Из Порядок Цикл
		Части = СтрРазделить(Элемент, ".");
		Тип = Части[0];
		Ключ = Части[1];
		Структура = ?(Тип = "Счетчик", Счетчик, Статус);
		Если Структура.Свойство(Ключ) Тогда
			Значение = Структура[Ключ];
			Если Тип = "Счетчик" Тогда
				Строки.Добавить(Ключ + ": " + Значение.Строкой());
			ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
				Строки.Добавить(Ключ + ": " + Формат(Значение, "ДЛФ=DT"));
			ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
				Строки.Добавить(Ключ + ": " + Формат(Значение, "ЧГ="));
			Иначе
				Строки.Добавить(Ключ + ": " + Строка(Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСоединить(Строки, Разделитель);
КонецФункции

// Сохраняет данные монитора в текстовый файл.
// Параметры:
//   ИмяФайла - Строка - Полный путь к файлу.
Процедура СохранитьВФайл(ИмяФайла) Экспорт
	Текст = Строкой();
	Запись = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Запись.Записать(Текст);
	Запись.Закрыть();
КонецПроцедуры

// Выводит данные монитора в строку состояния (только в обычном приложении).
Процедура ВывестиВСостояние() Экспорт
	Если НЕ ФоновыйРежим И ОбычноеПриложение Тогда
		стр = Строкой(" ");
		Выполнить("Состояние(стр)");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

ЗначенияПоУмолчанию();
