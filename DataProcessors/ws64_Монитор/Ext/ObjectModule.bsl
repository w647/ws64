// МодульОбъектаОбработки: ws64_Монитор
// Описание: Монитор для отслеживания прогресса задач с использованием счетчиков и статусов
// Автор: Валерий
// Дата создания: 2025-04-29
// Версия: v2.4
// Зависимости: ws64_Счетчик, ws64_Логгер

#Область ОписаниеПеременных

Перем Счетчики; // Соответствие: Имя -> ОбработкаОбъект.ws64_Счетчик
Перем Статусы; // Соответствие: Имя -> Значение (строка, дата, число)
Перем Порядок; // Массив строк вида <Тип><РазделительКлючей><Ключ>, порядок вывода
Перем ОбычноеПриложение; // Булево, признак обычного приложения
Перем ФоновыйРежим; // Булево, признак фонового режима
Перем Логгер; // ОбработкаОбъект.ws64_Логгер, Null - Объект для логирования, если задан
Перем РазделительКлючей; // Строка - Символ-разделитель (по умолчанию Символ(31))
Перем Исключения; // Структура - Сообщения об ошибках

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает или возвращает фоновый режим.
// Параметры:
//   НовоеЗначение - Булево, Null - Новый режим. Если Null, возвращается текущий режим.
// Возвращаемое значение:
//   Булево - Текущий режим (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ФоновыйРежим(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ФоновыйРежим;
    КонецЕсли;
    ФоновыйРежим = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает статус по ключу.
// Параметры:
//   Ключ - Строка - Идентификатор статуса.
//   НовоеЗначение - Произвольный, Null - Новое значение статуса. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Произвольное - Текущее значение статуса (если Null, возвращает Неопределено, если ключа нет).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция Статус(Ключ, НовоеЗначение = Null) Экспорт
    Если ПустаяСтрока(Ключ) Тогда
        ВызватьИсключение Исключения.ПустойКлюч;
    КонецЕсли;
    Если СтрНайти(Ключ, РазделительКлючей) > 0 Тогда
        ВызватьИсключение Исключения.ЗапрещенныйРазделитель;
    КонецЕсли;
    Если НовоеЗначение = Null Тогда
        Возврат Статусы[Ключ]; // Доступ по оригинальному ключу
    КонецЕсли;
    Статусы[Ключ] = НовоеЗначение; // Запись по оригинальному ключу
    Порядок(Ключ, "Статус");
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает счетчик по ключу.
// Параметры:
//   Ключ - Строка - Идентификатор счетчика.
//   Описание - Строка, Null - Описание счетчика. Если Null, возвращается счетчик.
// Возвращаемое значение:
//   ОбработкаОбъект.ws64_Счетчик - Существующий или новый счетчик (если Описание = Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано Описание).
Функция Счетчик(Ключ, Описание = Null) Экспорт
	Если ПустаяСтрока(Ключ) Тогда
		ВызватьИсключение Исключения.EmptyKey;
	КонецЕсли;
	Если СтрНайти(Ключ, РазделительКлючей) > 0 Тогда
		ВызватьИсключение Исключения.InvalidSeparator;
	КонецЕсли;
	СчетчикОбъект = Счетчики[Ключ];
	Если СчетчикОбъект = Неопределено Тогда
		СчетчикОбъект = Обработки.ws64_Счетчик.Создать().Инициализация();
		Счетчики[Ключ] = СчетчикОбъект;
	КонецЕсли;
	Порядок(Ключ, "Счетчик");
	Если Описание = Null Тогда  
		Возврат СчетчикОбъект;
	Иначе
		СчетчикОбъект.Описание(Описание);
		Возврат ЭтотОбъект;
	КонецЕсли;
КонецФункции

// Устанавливает или возвращает объект логгера.
// Параметры:
//   НовыйЛоггер - ОбработкаОбъект.ws64_Логгер, Null - Новый объект логгера. Если Null, возвращается текущий логгер.
//                  Если не задан и логгер не инициализирован, создаётся новый с настройками по умолчанию.
// Возвращаемое значение:
//   ОбработкаОбъект.ws64_Логгер - Текущий логгер (существующий или новый).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция Логгер(НовыйЛоггер = Null) Экспорт
    Если НовыйЛоггер = Null Тогда
        Если Логгер = Неопределено Тогда
            Логгер = Обработки.ws64_Логгер.Создать(); // Создаём логгер по умолчанию
        КонецЕсли;
        Возврат Логгер;
    КонецЕсли;
    Если ТипЗнч(НовыйЛоггер) <> Тип("ОбработкаОбъект.ws64_Логгер") Тогда
        ВызватьИсключение Исключения.ЗапрещенныйЛогер;
    КонецЕсли;
    Логгер = НовыйЛоггер;
    Возврат ЭтотОбъект;
КонецФункции

// Удаляет счетчик или статус по ключу.
// Параметры:
//   Ключ - Строка - Идентификатор элемента.
//   Тип - Строка - Тип элемента ("Счетчик" или "Статус", по умолчанию "").
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Очистить(Ключ, Тип = "") Экспорт
    Если ПустаяСтрока(Ключ) Тогда
        ЗначенияПоУмолчаню();
        Возврат ЭтотОбъект;
    КонецЕсли;
    Если СтрНайти(Ключ, РазделительКлючей) > 0 Тогда
        ВызватьИсключение Исключения.ЗапрещенныйРазделитель;
    КонецЕсли;
    Если Тип = "Счетчик" Или ПустаяСтрока(Тип) Тогда
        Счетчики.Удалить(Ключ);
    КонецЕсли;
    Если Тип = "Статус" Или ПустаяСтрока(Тип) Тогда
        Статусы.Удалить(Ключ);
    КонецЕсли;
    Индекс = Порядок.Найти("Счетчик" + РазделительКлючей + Ключ); // Новый формат
    Если Индекс <> Неопределено Тогда
        Порядок.Удалить(Индекс);
    КонецЕсли;
    Возврат ЭтотОбъект;
КонецФункции

// Перемещает ключ в конец массива Порядок для актуализации порядка вывода.
// Параметры:
//   Ключ - Строка - Идентификатор счетчика или статуса.
//   Тип - Строка - Тип элемента ("Счетчик" или "Статус").
Процедура Порядок(Ключ, Тип) Экспорт
    Если СтрНайти(Ключ, РазделительКлючей) > 0 Тогда
        ВызватьИсключение Исключения.ЗапрещенныйРазделитель;
    КонецЕсли;
    Элемент = Тип + РазделительКлючей + Ключ; // Новый формат: "Счетчик<РазделительКлючей>Ключ"
    Индекс = Порядок.Найти(Элемент);
    Если Индекс <> Неопределено Тогда
        Порядок.Удалить(Индекс);
    КонецЕсли;
    Структура = ?(Тип = "Счетчик", Счетчики, Статусы);
    Если Структура[Ключ] <> Неопределено Тогда // Используем оригинальный ключ
        Порядок.Добавить(Элемент);
    КонецЕсли;
КонецПроцедуры

// Синхронизирует Порядок с ключами из Счетчики и Статусы.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция СинхронизироватьПорядок() Экспорт
    Порядок.Очистить();
    Для Каждого Элемент Из Счетчики Цикл
        Порядок(Элемент.Ключ, "Счетчик");
    КонецЦикла;
    Для Каждого Элемент Из Статусы Цикл
        Порядок(Элемент.Ключ, "Статус");
    КонецЦикла;
    Возврат ЭтотОбъект;
КонецФункции

// Возвращает строковое представление монитора.
// Параметры:
//   Разделитель - Строка, Null - Разделитель строк (по умолчанию Символы.ПС).
// Возвращаемое значение:
//   Строка - Формат: "<Ключ1>: <Значение1><Разделитель><Ключ2>: <Значение2>..."
Функция Строкой(Разделитель = Null) Экспорт
    Строки = Новый Массив;
    Если Разделитель = Null Тогда
        Разделитель = Символы.ПС;
    КонецЕсли;
    Для Каждого Элемент Из Порядок Цикл
        Части = СтрРазделить(Элемент, РазделительКлючей); // Разделяем по РазделительКлючей
        Тип = Части[0]; // "Счетчик" или "Статус"
        Ключ = Части[1]; // Полный ключ, например "Справочник|Товар"
        Структура = ?(Тип = "Счетчик", Счетчики, Статусы);
        Если Структура[Ключ] <> Неопределено Тогда
            Значение = Структура[Ключ];
            Если Тип = "Счетчик" Тогда
                Строки.Добавить(Ключ + ": " + Значение.Строкой());
            ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
                Строки.Добавить(Ключ + ": " + Формат(Значение, "ДЛФ=DT"));
            ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
                Строки.Добавить(Ключ + ": " + Формат(Значение, "ЧГ="));
            Иначе
                Строки.Добавить(Ключ + ": " + Строка(Значение));
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    Возврат СтрСоединить(Строки, Разделитель);
КонецФункции

// Сохраняет данные монитора в текстовый файл.
// Параметры:
//   ИмяФайла - Строка - Полный путь к файлу.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция СохранитьВФайл(ИмяФайла) Экспорт
    Текст = Строкой();
    Запись = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
    Запись.Записать(Текст);
    Запись.Закрыть();
    Возврат ЭтотОбъект;
КонецФункции

// Выводит данные монитора в строку состояния (только в обычном приложении).
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция ВывестиВСостояние() Экспорт
    Если Не ФоновыйРежим И ОбычноеПриложение Тогда
        Выполнить("Состояние(Строкой("" ""))");
    КонецЕсли;
    Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значения по умолчанию для переменных монитора.
Процедура ЗначенияПоУмолчаню()
    Счетчики = Новый Соответствие;
    Статусы = Новый Соответствие;
    Порядок = Новый Массив;
    ОбычноеПриложение = ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
    ФоновыйРежим = Ложь;
    Логгер = Неопределено;
    РазделительКлючей = Символ(31); // Устанавливаем по умолчанию Unit Separator
	
	Исключения = Новый Структура;
    Исключения.Вставить("ПустойКлюч",НСтр("ru = 'Ключ не может быть пустым.'"));
    Исключения.Вставить("ЗапрещенныйРазделитель", 
	НСтр("ru = 'Ключ содержит недопустимый символ разделителя: Символ(31).Использование такого символа запрещено.'"));
    Исключения.Вставить("ЗапрещенныйЛогер", НСтр("ru = 'Ожидается логгер типа ws64_Логгер.'"));

КонецПроцедуры

#КонецОбласти

#Область Тесты

// Тесты для проверки корректности работы монитора
Процедура Тест() Экспорт
    Ошибки = Новый Массив;
    
    Тест1(Ошибки);
    Тест2(Ошибки);
    Тест3(Ошибки);
    Тест4(Ошибки);
    Тест5(Ошибки);
    
    // Итоги тестирования
    Если Ошибки.Количество() = 0 Тогда
        Сообщить("ws64_Монитор: Все тесты пройдены успешно");
    Иначе
        Сообщить("ws64_Монитор: Обнаружены ошибки" + Символы.ПС + СтрСоединить(Ошибки, Символы.ПС));
    КонецЕсли;
КонецПроцедуры

// Тест 1: Проверка инициализации монитора
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест1(Ошибки)
    Монитор = Обработки.ws64_Монитор.Создать()
        .ФоновыйРежим(Ложь);
    Если Монитор.ФоновыйРежим() <> Ложь Тогда
        Ошибки.Добавить("Тест 1: Ошибка инициализации фонового режима");
    КонецЕсли;
КонецПроцедуры

// Тест 2: Проверка установки и получения статуса
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест2(Ошибки)
    Монитор = Обработки.ws64_Монитор.Создать()
        .Статус("Состояние", "В процессе");
    Если Монитор.Статус("Состояние") <> "В процессе" Тогда
        Ошибки.Добавить("Тест 2: Ошибка установки статуса");
    КонецЕсли;
КонецПроцедуры

// Тест 3: Проверка добавления счетчика
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест3(Ошибки)
    Монитор = Обработки.ws64_Монитор.Создать();
    Счетчик = Монитор.Счетчик("Товары");
    Если Монитор.Счетчик("Товары") <> Счетчик Тогда
        Ошибки.Добавить("Тест 3: Ошибка добавления счетчика");
    КонецЕсли;
	Если Счетчик.Минимум() <> 0 
		Или Счетчик.Максимум() <> Неопределено 
		Или Счетчик.ИнтервалОбновления() <> 1000 
		Или Счетчик.Описание() <> "Счетчик" 
		Тогда
        Ошибки.Добавить("Тест 3: Ошибка установки значений по умолчанию для счетчика");
    КонецЕсли;
КонецПроцедуры

// Тест 4: Проверка вывода строки с ключами, содержащими точки или символ "|"
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест4(Ошибки)
	Монитор = Обработки.ws64_Монитор.Создать()
	.Статус("Состояние", "В процессе")
	.Статус("Справочник|Товар", "Ожидание") // Ключ с "|"
	.Счетчик("Справочник|Документ","Процесс"); // Ключ с "|"

	ОжидаемаяСтрока = 
	"Состояние: В процессе
	|Справочник|Товар: Ожидание
	|Справочник|Документ: 0 Процесс";
	
	Если Монитор.Строкой() <> ОжидаемаяСтрока Тогда
		Ошибки.Добавить("Тест 4: Ошибка формирования строки с ключами, содержащими точки или символ |");
	КонецЕсли;
	
	// Тест на исключение при использовании РазделительКлючей
	Попытка
		Монитор.Статус("Тест"+РазделительКлючей + "НедопустимыйКлюч", "Тест");
		Ошибки.Добавить("Тест 4: Ожидалось исключение при использовании символа разделителя в ключе");
	Исключение
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Тест 5: Проверка установки и получения логгера
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест5(Ошибки)
    Монитор = Обработки.ws64_Монитор.Создать();
    Если ТипЗнч(Монитор.Логгер()) <> Тип("ОбработкаОбъект.ws64_Логгер") Тогда
        Ошибки.Добавить("Тест 5: Ошибка создания логгера по умолчанию");
    КонецЕсли;
    ЛоггерОбъект = Обработки.ws64_Логгер.Создать();
    Монитор.Логгер(ЛоггерОбъект);
    Если Монитор.Логгер() <> ЛоггерОбъект Тогда
        Ошибки.Добавить("Тест 5: Ошибка установки пользовательского логгера");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Примеры
Процедура ПримерИспользования() Экспорт
	Монитор = Обработки.ws64_Монитор.Создать()
	.ФоновыйРежим(Ложь)
	.Статус("Состояние", "В процессе")
	.Статус("Справочник|Товар", "Ожидание") // Работает корректно
	.Счетчик("Справочник|Документ","Товар"); // Работает корректно
	
	Монитор
	.СохранитьВФайл("\\Kravchenkoaa-te\shr\TMP\monitor.txt")
	.ВывестиВСостояние();
	
	Сообщить(Монитор.Строкой());
	
	// Попытка с пустым ключом вызовет исключение
	Попытка
		Монитор.Статус("", "Тест");
	Исключение
		Сообщить(ОписаниеОшибки()); // Выводит: Ключ не может быть пустым.
	КонецПопытки;
	
	// Попытка с ключом, содержащим РазделительКлючей, вызовет исключение
	Попытка
		Монитор.Статус(Монитор.РазделительКлючей + "НедопустимыйКлюч", "Тест");
	Исключение
		Сообщить(ОписаниеОшибки()); // Выводит: Ключ содержит недопустимый символ разделителя: Символ(31). Использование такого символа запрещено.
	КонецПопытки;
	
КонецПроцедуры
#КонецОбласти


#Область Инициализация

ЗначенияПоУмолчаню();

#КонецОбласти