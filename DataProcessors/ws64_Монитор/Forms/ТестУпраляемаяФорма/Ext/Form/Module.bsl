&НаКлиенте
Процедура Тест(Команда)
	ТестМонитор();
КонецПроцедуры

// Пример использования объектов ws64_Счетчик и ws64_Монитор
// Описание: Демонстрация отслеживания прогресса обработки 10 000 записей с использованием всех методов ws64_Счетчик
// Автор: Валерий
// Дата создания: 2025-04-29
// Зависимости: ws64_Счетчик, ws64_Монитор


// Тестирует функциональность монитора и счетчика
&НаСервереБезКонтекста
Процедура ТестМонитор() Экспорт
	
	// Инициализация монитора
	Монитор = Обработки.ws64_Монитор.Создать();
	
	// Установка статуса: время начала обработки
	Монитор.Статус("Начало", ТекущаяДата());
	
	// Создание счетчиков
	ВсегоЗаписей = 10000;
	СчетчикВсего = Монитор.Счетчик("Всего", 0, ВсегоЗаписей, 1000, "Общее количество записей");
	СчетчикУспешно = Монитор.Счетчик("Успешно", 0, ВсегоЗаписей, 1000, "Успешно обработанные записи");
	
	// Установка статуса: текущая операция
	Монитор.Статус("Операция", "Инициализация");
	
	// Вывод начального состояния
	Монитор.ВывестиВСостояние();
	Сообщить(Монитор.Строкой(), СтатусСообщения.Информация);
	
	// Имитация обработки записей
	ОшибкаОбработки = Ложь;
	Для Номер = 1 По ВсегоЗаписей Цикл
		СчетчикВсего.Добавить();
		
		// Имитация ошибки на 5000-й записи
		Если Номер = 5000 Тогда
			Сообщить("Обнаружена ошибка на записи " + Формат(Номер, "ЧГ=") + ". Сброс счетчика успешных записей.", СтатусСообщения.Внимание);
			СчетчикУспешно.Сброс(); // Сбрасываем счетчик успешных записей
			Монитор.Статус("Ошибка", "Ошибка на записи " + Формат(Номер, "ЧГ="));
			ОшибкаОбработки = Истина;
		КонецЕсли;
		
		// Имитация успешной обработки (80% записей успешны, если нет ошибки)
		Если НЕ ОшибкаОбработки И СлучайноеЧисло(1, 100) <= 80 Тогда
			СчетчикУспешно.Добавить();
		КонецЕсли;
		
		// Обновление статуса операции каждые 2000 записей
		Если Номер % 2000 = 0 Тогда
			Монитор.Статус("Операция", "Обработка записи " + Формат(Номер, "ЧГ="));
		КонецЕсли;
		
		// Вывод прогресса по интервалу или проценту
		Если СчетчикВсего.Обновление(10) Тогда // Обновление каждые 10%
			Монитор.ВывестиВСостояние();
			Сообщить(СчетчикВсего.ПрогрессСтрокой() + ", Успешно: " + СчетчикУспешно.ПроцентВыполнения() + "%", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка диапазона
	Если СчетчикВсего.ВДиапазоне() Тогда
		Сообщить("Счетчик 'Всего' в допустимом диапазоне: " + СчетчикВсего.Строкой(Истина, Истина, Ложь), СтатусСообщения.Информация);
	Иначе
		Сообщить("Счетчик 'Всего' превысил максимум!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если СчетчикУспешно.ВДиапазоне() Тогда
		Сообщить("Счетчик 'Успешно' в допустимом диапазоне: " + СчетчикУспешно.Строкой(Истина, Истина, Ложь), СтатусСообщения.Информация);
	Иначе
		Сообщить("Счетчик 'Успешно' превысил максимум!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Тестирование прямого изменения значения
	СчетчикВсего.Значение = 15000;
	Если СчетчикВсего.ВДиапазоне() Тогда
		Сообщить("Счетчик 'Всего' в диапазоне после прямого изменения: " + СчетчикВсего.Строкой(Истина, Истина, Ложь), СтатусСообщения.Информация);
	Иначе
		Сообщить("Счетчик 'Всего' превысил максимум после прямого изменения: " + СчетчикВсего.Строкой(Истина, Истина, Ложь), СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Тестирование различных форматов Строкой
	Сообщить("Тестирование метода Строкой:", СтатусСообщения.Важное);
	Сообщить("Только итог: " + СчетчикВсего.Строкой(Истина, Ложь, Ложь), СтатусСообщения.Информация);
	Сообщить("Только счет: " + СчетчикВсего.Строкой(Ложь, Истина, Ложь), СтатусСообщения.Информация);
	Сообщить("Счет и остаток: " + СчетчикВсего.Строкой(Ложь, Истина, Истина), СтатусСообщения.Информация);
	Сообщить("Только описание: " + СчетчикВсего.Строкой(Ложь, Ложь, Ложь), СтатусСообщения.Информация);
	
	// Проверка отсутствия пробела в Строкой
	ОписаниеБезПробела = СчетчикВсего.Строкой(Ложь, Ложь, Ложь);
	Если ОписаниеБезПробела = СчетчикВсего.Описание Тогда
		Сообщить("Метод Строкой корректно возвращает описание без пробела: " + ОписаниеБезПробела, СтатусСообщения.Информация);
	Иначе
		Сообщить("Ошибка: Метод Строкой добавил лишний пробел: " + ОписаниеБезПробела, СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Тестирование счетчиков для массива
	М = Новый Массив;
	М.Добавить("Раз");
	М.Добавить("Два");
	М.Добавить("Три");
	
	СЧ = Монитор.Счетчик("Выборка1", 0, М.ВГраница(), 1, "Выборка записей");
	Пока СЧ.ВДиапазоне() Цикл
		Монитор.ВывестиВСостояние();
		Сообщить("Выборка1: " + М[СЧ.Значение], СтатусСообщения.Информация);
		СЧ.Добавить();
	КонецЦикла;
	
	СЧ = Монитор.Счетчик("Выборка2", 1, М.Количество(), 1, "Выборка массива");
	Пока СЧ.ВДиапазоне() Цикл
		Монитор.ВывестиВСостояние();
		Сообщить("Выборка2: " + М[СЧ.Значение-1], СтатусСообщения.Информация);
		СЧ.Добавить();
	КонецЦикла;
	
	// Тестирование Очистить и СинхронизироватьПорядок
	Монитор.Очистить("Успешно", "Счетчик");
	Монитор.Очистить("Ошибка", "Статус");
	Монитор.СинхронизироватьПорядок();
	Сообщить("После очистки счетчика 'Успешно' и статуса 'Ошибка':", СтатусСообщения.Важное);
	Сообщить(Монитор.Строкой(), СтатусСообщения.Информация);
	
	// Тестирование счетчика без максимума
	Попытка
		СЧ = Монитор.Счетчик("БезМаксимума", 0, Неопределено, 1000, "Счетчик без максимума");
		СЧ.Добавить(100);
		Сообщить("Счетчик без максимума: " + СЧ.Строкой(Истина, Истина, Истина), СтатусСообщения.Информация);
		СЧ.ВДиапазоне();
		Сообщить("Ошибка: Счетчик без максимума не вызвал исключение!", СтатусСообщения.Внимание);
	Исключение
		Сообщить("Ожидаемая ошибка для счетчика без максимума: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	// Тестирование статуса с ИгнорироватьОшибку
	Результат = Монитор.Статус("Несуществующий", Неопределено, Истина);
	Если Результат = Неопределено Тогда
		Сообщить("Статус с несуществующим ключом возвращает Неопределено при ИгнорироватьОшибку=Истина", СтатусСообщения.Информация);
	Иначе
		Сообщить("Ошибка: Статус с несуществующим ключом должен вернуть Неопределено!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Тестирование некорректных ключей
	Попытка
		Монитор.Статус("", "Тест");
		Сообщить("Ошибка: Пустой ключ в Статус не вызвал исключение!", СтатусСообщения.Внимание);
	Исключение
		Сообщить("Ожидаемая ошибка для пустого ключа в Статус: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	Попытка
		Монитор.Счетчик("", 0, 100, 1000, "Тест");
		Сообщить("Ошибка: Пустой ключ в Счетчик не вызвал исключение!", СтатусСообщения.Внимание);
	Исключение
		Сообщить("Ожидаемая ошибка для пустого ключа в Счетчик: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	// Установка статуса: время завершения
	Монитор.Статус("Завершение", ТекущаяДата());
	
	// Итоговый вывод
	Сообщить("Итоговое состояние:", СтатусСообщения.Важное);
	Сообщить(Монитор.Строкой(), СтатусСообщения.Информация);
	
	// Сохранение результата в файл
	Попытка
		Монитор.СохранитьВФайл("C:\Temp\Монитор_Прогресс.txt");
		Сообщить("Результат сохранен в файл: C:\Temp\Монитор_Прогресс.txt", СтатусСообщения.Информация);
	Исключение
		Сообщить("Ошибка сохранения файла: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает случайное число в заданном диапазоне
// Параметры:
//   Мин - Число - Минимальное значение
//   Макс - Число - Максимальное значение
// Возвращаемое значение:
//   Число - Случайное число
&НаСервереБезКонтекста
Функция СлучайноеЧисло(Мин, Макс)
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	Возврат ГСЧ.СлучайноеЧисло(Мин, Макс);
КонецФункции