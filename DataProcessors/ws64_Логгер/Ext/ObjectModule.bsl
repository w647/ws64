// BSLLS:DeprecatedMessage-off
// BSLLS:UsingHardcodePath-off
// МодульОбъектаОбработки: ws64_Логгер
// Описание: Организация журналирования процессов с поддержкой различных уровней логирования
// Автор: Валерий
// Дата создания: 2025-03-16
// Версия: v1.4
// Зависимости: НЕТ

#Область ОписаниеПеременных

Перем КэшСообщений; // Число - Максимальное количество строк сообщений в кэше
Перем ПериодХраненияЧасов; // Число - Период хранения логов в часах
Перем УровеньЛогирования; // Число - Уровень вывода лога (1-5)
Перем ВыводВОкно; // Булево - Вывод сообщений в окно
Перем ВыводВФайл; // Булево - Вывод сообщений в файл
Перем ВыводВЖурнал; // Булево - Запись в журнал регистрации
Перем ПутьКФайлуЛога; // Строка - Путь к файлу лога
Перем ПечатьДаты; // Булево - Вывод даты в сообщении
Перем ПечатьТаймера; // Булево - Вывод времени выполнения
Перем ПечатьПрефикса; // Булево - Вывод префикса сообщения

Перем ВремяСтарта; // Дата - Время старта таймера
Перем Сообщения; // Строка - Кэш строк сообщений
Перем ЗаписьЛога; // ЗаписьТекста - Объект для записи лога
Перем ОбычноеПриложение; // Булево - Признак обычного приложения

Перем УровеньЛогаМинимум; // Число - Минимальный уровень логирования (1)
Перем УровеньЛогаМаксимум; // Число - Максимальный уровень логирования (5)

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает или возвращает максимальное количество строк в кэше сообщений.
// Параметры:
//   НовоеЗначение - Число, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Число - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция КэшСообщений(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат КэшСообщений;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Кэш сообщений должен быть числом.";
    КонецЕсли;
    КэшСообщений = Цел(Макс(НовоеЗначение, 1));
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает период хранения логов в часах.
// Параметры:
//   НовоеЗначение - Число, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Число - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ПериодХраненияЧасов(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ПериодХраненияЧасов;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Период хранения должен быть числом.";
    КонецЕсли;
    ПериодХраненияЧасов = Цел(Макс(НовоеЗначение, 0));
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает уровень логирования.
// Параметры:
//   НовоеЗначение - Число, Null - Новый уровень (1-5). Если Null, возвращается текущий уровень.
// Возвращаемое значение:
//   Число - Текущий уровень (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция УровеньЛогирования(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат УровеньЛогирования;
    КонецЕсли;
    Если ТипЗнч(НовоеЗначение) <> Тип("Число") Тогда
        ВызватьИсключение "Уровень логирования должен быть числом.";
    КонецЕсли;
    УровеньЛогирования = Цел(Мин(Макс(НовоеЗначение, УровеньЛогаМинимум), УровеньЛогаМаксимум));
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак вывода сообщений в окно.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ВыводВОкно(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ВыводВОкно;
    КонецЕсли;
    ВыводВОкно = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак вывода сообщений в файл.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ВыводВФайл(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ВыводВФайл;
    КонецЕсли;
    ВыводВФайл = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак записи в журнал регистрации.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ВыводВЖурнал(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ВыводВЖурнал;
    КонецЕсли;
    ВыводВЖурнал = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает путь к файлу лога.
// Параметры:
//   НовоеЗначение - Строка, Null - Новый путь. Если Null, возвращается текущий путь.
// Возвращаемое значение:
//   Строка - Текущее путь (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ПутьКФайлуЛога(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ПутьКФайлуЛога;
    КонецЕсли;
    ПутьКФайлуЛога = НовоеЗначение;
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак вывода даты в сообщении.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ПечатьДаты(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ПечатьДаты;
    КонецЕсли;
    ПечатьДаты = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак вывода времени выполнения.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ПечатьТаймера(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ПечатьТаймера;
    КонецЕсли;
    ПечатьТаймера = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Устанавливает или возвращает признак вывода префикса сообщения.
// Параметры:
//   НовоеЗначение - Булево, Null - Новое значение. Если Null, возвращается текущее значение.
// Возвращаемое значение:
//   Булево - Текущее значение (если Null).
//   ЭтотОбъект - Для цепочки вызовов (если указано значение).
Функция ПечатьПрефикса(НовоеЗначение = Null) Экспорт
    Если НовоеЗначение = Null Тогда
        Возврат ПечатьПрефикса;
    КонецЕсли;
    ПечатьПрефикса = Булево(НовоеЗначение);
    Возврат ЭтотОбъект;
КонецФункции

// Инициализирует логгер, проверяя и подготавливая параметры.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Инициализация() Экспорт
    ТаймерСброс();
    
    Сообщения = "";
    Если Не ЗначениеЗаполнено(ПутьКФайлуЛога) Тогда
        ВыводВФайл = Ложь;
    КонецЕсли;
    Если ВыводВФайл Тогда
        Файл = Новый Файл(ПутьКФайлуЛога);
        Каталог = Новый Файл(Файл.Путь);
        Если Каталог.Существует() И Каталог.ЭтоКаталог() Тогда
            ИмяФайлаЛога = Файл.Путь + Файл.ИмяБезРасширения
                + "." + Формат(ВремяСтарта, "ДФ=yyMMddHHmm") + Файл.Расширение;
            ЗаписьЛога = Новый ЗаписьТекста;
            ЗаписьЛога.Открыть(ИмяФайлаЛога, КодировкаТекста.UTF8, Символы.ПС, Истина);
        Иначе
            ВыводВФайл = Ложь;
        КонецЕсли;
    КонецЕсли;
    УдалитьСтарыеФайлы();
    
    Возврат ЭтотОбъект;
КонецФункции

// Сбрасывает состояние логгера, записывая кэшированные сообщения в файл.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Сброс() Экспорт
    Если ВыводВФайл Тогда
        КоличествоСтрок = СтрЧислоСтрок(Сообщения);
        Если КоличествоСтрок > 0 Тогда
            Сообщения = Лев(Сообщения, СтрДлина(Сообщения) - 1);
            ЗаписьЛога.ЗаписатьСтроку(Сообщения);
            Сообщения = "";
        КонецЕсли;
    КонецЕсли;
    ЗаписьЛога = Undefined;
    Возврат ЭтотОбъект;
КонецФункции

// Сбрасывает таймер, устанавливая текущее время как начало отсчёта.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция ТаймерСброс() Экспорт
    ВремяСтарта = ТекущаяДатаСеанса();
    Возврат ЭтотОбъект;
КонецФункции

// Логирует сообщение с уровнем "Ошибка".
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения или информация об ошибке.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Ошибка(Текст, Объект = Undefined) Экспорт
    Если УровеньЛогирования < УровеньЛогаМинимум Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    Лог(Текст, Объект, "err", СтатусСообщения.ОченьВажное, УровеньЖурналаРегистрации.Ошибка);
    Возврат ЭтотОбъект;
КонецФункции

// Логирует сообщение с уровнем "Внимание".
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения или информация об ошибке.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Внимание(Текст, Объект = Undefined) Экспорт
    Если УровеньЛогирования < 2 Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    Лог(Текст, Объект, "wrn", СтатусСообщения.Внимание, УровеньЖурналаРегистрации.Предупреждение);
    Возврат ЭтотОбъект;
КонецФункции

// Логирует сообщение с уровнем "Информация".
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения или информация об ошибке.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Инфо(Текст, Объект = Undefined) Экспорт
    Если УровеньЛогирования < 3 Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    Лог(Текст, Объект, "inf", СтатусСообщения.Информация, УровеньЖурналаРегистрации.Информация);
    Возврат ЭтотОбъект;
КонецФункции

// Логирует сообщение с уровнем "Отладка".
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения или информация об ошибке.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Отладка(Текст, Объект = Undefined) Экспорт
    Если УровеньЛогирования < 4 Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    Лог(Текст, Объект, "dbg", СтатусСообщения.Важное, УровеньЖурналаРегистрации.Примечание);
    Возврат ЭтотОбъект;
КонецФункции

// Логирует сообщение с уровнем "Трасса".
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения или информация об ошибке.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
// Возвращаемое значение:
//   ЭтотОбъект - Для цепочки вызовов.
Функция Трасса(Текст, Объект = Undefined) Экспорт
    Если УровеньЛогирования < УровеньЛогаМаксимум Тогда
        Возврат ЭтотОбъект;
    КонецЕсли;
    Лог(Текст, Объект, "trc", СтатусСообщения.Обычное, УровеньЖурналаРегистрации.Примечание);
    Возврат ЭтотОбъект;
КонецФункции

// Возвращает кэшированные сообщения в виде строки.
// Параметры:
//   Разделитель - Строка, Null - Разделитель строк (по умолчанию Символы.ПС).
// Возвращаемое значение:
//   Строка - Текущие сообщения в кэше.
Функция ПоказатьЛог(Разделитель = Null) Экспорт
    Если Разделитель = Null Тогда
        Разделитель = Символы.ПС;
    КонецЕсли;
    Возврат Сообщения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значения по умолчанию для переменных логгера.
Процедура ЗначенияПоУмолчанию()
    КэшСообщений = 1000;
    ПериодХраненияЧасов = 48;
    УровеньЛогирования = 3;
    ВыводВОкно = Ложь;
    ВыводВФайл = Ложь;
    ВыводВЖурнал = Ложь;
    ПутьКФайлуЛога = "";
    ПечатьДаты = Ложь;
    ПечатьТаймера = Ложь;
    ПечатьПрефикса = Ложь;
    
    Сообщения = "";
    ОбычноеПриложение = ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;

    УровеньЛогаМинимум = 1;
    УровеньЛогаМаксимум = 5;

    ТаймерСброс();
КонецПроцедуры

// Формирует и логирует сообщение.
// Параметры:
//   Текст - Строка, ИнформацияОбОшибке - Текст сообщения.
//   Объект - Произвольный - Объект метаданных для журнала регистрации.
//   Префикс - Строка - Префикс сообщения (например, "err").
//   Статус - СтатусСообщения - Статус для вывода в окно.
//   УровеньЖурнала - УровеньЖурналаРегистрации - Уровень для журнала регистрации.
Процедура Лог(Текст, Объект = Undefined, Префикс = "", Статус = Undefined, УровеньЖурнала = Undefined)
    СтатусСообщения = ?(Статус = Undefined, СтатусСообщения.БезСтатуса, Статус);
    УровеньЖурналаРегистрации = ?(УровеньЖурнала = Undefined, УровеньЖурналаРегистрации.Примечание, УровеньЖурнала);
    
    Если ТипЗнч(Текст) = Тип("ИнформацияОбОшибке") Тогда
        Текст = НСтр("ru='Описание=';en='Description='") + Текст.Описание + Символы.ПС
            + НСтр("ru='ИмяМодуля=';en='ModuleName='") + Текст.ИмяМодуля + Символы.ПС
            + НСтр("ru='НомерСтроки=';en='LineNumber='") + Текст.НомерСтроки + Символы.ПС
            + НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Текст.ИсходнаяСтрока + Символы.ПС;
    КонецЕсли;
    
    ФорматированноеСообщение = ФорматСообщения(Текст, Префикс);
    
    Если ВыводВОкно Тогда
        Если ОбычноеПриложение Тогда
            Сообщить(ФорматированноеСообщение, СтатусСообщения);
        Иначе
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = ФорматированноеСообщение;
            Сообщение.Сообщить();
        КонецЕсли;
    КонецЕсли;
    
    Если ВыводВФайл Тогда
        Сообщения = Сообщения + ФорматированноеСообщение + Символы.ПС;
        КоличествоСтрок = СтрЧислоСтрок(Сообщения);
        Если КоличествоСтрок > КэшСообщений Тогда
            Сообщения = Лев(Сообщения, СтрДлина(Сообщения) - 1);
            ЗаписьЛога.ЗаписатьСтроку(Сообщения);
            Сообщения = "";
        КонецЕсли;
    КонецЕсли;
    
    Если ВыводВЖурнал Тогда
        Событие = ?(ЗначениеЗаполнено(Префикс), Префикс, "log");
        ЗаписьЖурналаРегистрации(
            Событие,
            УровеньЖурналаРегистрации,
            ?(Объект = Undefined, Undefined, Объект.Метаданные()),
            Объект,
            Текст,
            РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
        );
    КонецЕсли;
КонецПроцедуры

// Удаляет старые файлы логов, если их возраст превышает период хранения.
Процедура УдалитьСтарыеФайлы()
    Если Не ВыводВФайл Тогда
        Возврат;
    КонецЕсли;
    Секунд = 60;
    Минут = 60;
    ПериодСекунд = ПериодХраненияЧасов * Минут * Секунд;
    Файл = Новый Файл(ПутьКФайлуЛога);
    Файлы = НайтиФайлы(Файл.Путь, Файл.ИмяБезРасширения + "*." + Файл.Расширение);
    
    Для Каждого НайденныйФайл Из Файлы Цикл
        Если НайденныйФайл.ЭтоКаталог() Тогда
            Продолжить;
        КонецЕсли;
        Если ТекущаяДатаСеанса() - НайденныйФайл.ПолучитьВремяИзменения() > ПериодСекунд Тогда
            УдалитьФайлы(НайденныйФайл.ПолноеИмя);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Возвращает время выполнения с момента старта таймера в формате "ЧЧ:ММ:СС".
// Возвращаемое значение:
//   Строка - Время выполнения.
Функция Таймер()
    ВремяПрошло = ТекущаяДатаСеанса() - ВремяСтарта;
    СекундВСутках = 3600;
    МинутВЧасе = 60;
    Часы = Цел(ВремяПрошло / СекундВСутках);
    Минуты = Цел(ВремяПрошло % СекундВСутках / МинутВЧасе);
    Секунды = ВремяПрошло % СекундВСутках % МинутВЧасе;
    ФорматЧасов = "ЧДЦ=0; ЧН=; ЧГ=";
    ФорматМинутСекунд = "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=";
    Возврат Формат(Часы, ФорматЧасов) 
        + ":" + Формат(Минуты, ФорматМинутСекунд) 
        + ":" + Формат(Секунды, ФорматМинутСекунд);
КонецФункции

// Формирует строку сообщения с учётом настроек формата.
// Параметры:
//   Текст - Строка - Текст сообщения.
//   Префикс - Строка - Префикс сообщения.
// Возвращаемое значение:
//   Строка - Форматированное сообщение.
Функция ФорматСообщения(Текст, Префикс = "")
    Возврат ""
        + ?(ПечатьДаты, Формат(ТекущаяДатаСеанса(), "ДФ=HH.mm.ss") + " ", "")
        + ?(ПечатьТаймера, Таймер() + " ", "")
        + ?(ПечатьПрефикса И ЗначениеЗаполнено(Префикс), Префикс + " ", "")
        + Текст;
КонецФункции

#КонецОбласти

#Область Тесты

// Тесты для проверки корректности работы логгера
Процедура Тест() Экспорт
    Ошибки = Новый Массив;
    
    Тест1(Ошибки);
    Тест2(Ошибки);
    Тест3(Ошибки);
    Тест4(Ошибки);
    Тест5(Ошибки);
    
    // Итоги тестирования
    Если Ошибки.Количество() = 0 Тогда
        Сообщить("ws64_Логгер: Все тесты пройдены успешно");
    Иначе
        Сообщить("ws64_Логгер: Обнаружены ошибки" + Символы.ПС + СтрСоединить(Ошибки, Символы.ПС));
    КонецЕсли;
КонецПроцедуры

// Тест 1: Проверка инициализации логгера
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест1(Ошибки)
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(2)
        .ВыводВОкно(Истина)
        .ВыводВФайл(Ложь)
        .ВыводВЖурнал(Ложь)
        .Инициализация();
    Если Логгер.УровеньЛогирования() <> 2
        Или Логгер.ВыводВОкно() <> Истина
        Или Логгер.ВыводВФайл() <> Ложь
        Или Логгер.ВыводВЖурнал() <> Ложь Тогда
        Ошибки.Добавить("Тест 1: Ошибка инициализации логгера");
    КонецЕсли;
КонецПроцедуры

// Тест 2: Проверка логирования сообщения
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест2(Ошибки)
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(3)
        .ВыводВОкно(Ложь)
        .ВыводВФайл(Истина)
        .ПутьКФайлуЛога("\\Kravchenkoaa-te\shr\TMP\log.txt")
        .Инициализация();
    Логгер.Инфо("Тестовое сообщение");
    Если ПустаяСтрока(Логгер.ПоказатьЛог()) Тогда
        Ошибки.Добавить("Тест 2: Ошибка логирования сообщения");
    КонецЕсли;
    Логгер.Сброс();
КонецПроцедуры

// Тест 3: Проверка работы уровней логирования
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест3(Ошибки)
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(2)
        .ВыводВОкно(Ложь)
        .ВыводВФайл(Истина)
        .ПутьКФайлуЛога("\\Kravchenkoaa-te\shr\TMP\log.txt")
        .Инициализация();
    Логгер.Инфо("Сообщение не должно записаться");
    Логгер.Внимание("Сообщение должно записаться");
    Если СтрЧислоСтрок(Логгер.ПоказатьЛог()) <> 2 Тогда // 1 строка + пустая
        Ошибки.Добавить("Тест 3: Ошибка работы уровней логирования");
    КонецЕсли;
    Логгер.Сброс();
КонецПроцедуры

// Тест 4: Проверка формата сообщения
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест4(Ошибки)
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(3)
        .ВыводВОкно(Ложь)
        .ВыводВФайл(Истина)
        .ПутьКФайлуЛога("\\Kravchenkoaa-te\shr\TMP\log.txt")
        .ПечатьДаты(Истина)
        .ПечатьТаймера(Истина)
        .ПечатьПрефикса(Истина)
        .Инициализация();
    Логгер.Инфо("Тест");
    СообщенияЛога = Логгер.ПоказатьЛог();
    Если Не СтрНачинаетсяС(СообщенияЛога, Формат(ТекущаяДатаСеанса(), "ДФ=HH.mm.ss"))
        Или СтрНайти(СообщенияЛога, "inf") = 0 Тогда
        Ошибки.Add("Тест 4: Ошибка формата сообщения");
    КонецЕсли;
    Логгер.Сброс();
КонецПроцедуры

// Тест 5: Проверка сброса кэша сообщений
// Параметры:
//   Ошибки - Массив - Массив для добавления описаний ошибок при неудачном тесте.
Процедура Тест5(Ошибки)
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(3)
        .ВыводВОкно(Ложь)
        .ВыводВФайл(Истина)
        .ПутьКФайлуЛога("\\Kravchenkoaa-te\shr\TMP\log.txt")
        .КэшСообщений(1)
        .Инициализация();
    Логгер.Инфо("Сообщение 1");
    Логгер.Инфо("Сообщение 2");
    Если СтрЧислоСтрок(Логгер.ПоказатьЛог()) > 2 Тогда // 1 строка + пустая
        Ошибки.Add("Тест 5: Ошибка сброса кэша сообщений");
    КонецЕсли;
    Логгер.Сброс();
КонецПроцедуры

#КонецОбласти

#Область Примеры

// Пример использования логгера
Процедура ПримерИспользования() Экспорт
    Логгер = Обработки.ws64_Логгер.Создать()
        .УровеньЛогирования(5)
        .ВыводВОкно(Истина)
        .ВыводВФайл(Истина)
        .ПутьКФайлуЛога("\\Kravchenkoaa-te\shr\TMP\log.txt")
        .ПечатьДаты(Истина)
        .ПечатьТаймера(Истина)
        .ПечатьПрефикса(Истина)
        .Инициализация();
    
    Логгер.Ошибка("Произошла ошибка");
    Логгер.Внимание("Предупреждение");
    Логгер.Инфо("Информационное сообщение");
    Логгер.Отладка("Сообщение отладки");
    Логгер.Трасса("Сообщение трассировки");
    
    Сообщить("Текущий лог:");
    Сообщить(Логгер.ПоказатьЛог());
    
    Логгер.Сброс();
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗначенияПоУмолчанию();

#КонецОбласти